#!/usr/bin/env python

import inspect
import operator
import os
import sys
import json
from hashlib import sha256

import dt_settings

dtlib_path = os.path.realpath(
    os.path.join(os.path.dirname(inspect.getfile(inspect.currentframe())), dt_settings.DTOOLS_LIB_RELATIVE_PATH))
if dtlib_path not in sys.path:
    sys.path.insert(0, dtlib_path)

from dtools_lib import transforms


def _histogram_hash(histogram):
    _hash = sha256()
    for i in sorted(histogram.items(), key=operator.itemgetter(1), reverse=True):
        _hash.update(f"{i[0]}:{i[1]},".encode("utf-8"))
    return _hash.hexdigest()


class ColumnarTable(object):
    class Profile(object):
        value_histogram = None
        pattern_histogram = None
        minimum_length = sys.maxsize
        maximum_length = 0
        minimum_length_exemplar = None
        maximum_length_exemplar = None

        @property
        def num_values(self):
            return sum(self.value_histogram.values())

        @property
        def num_distinct_values(self):
            return len(self.value_histogram)

        @property
        def num_distinct_patterns(self):
            return len(self.pattern_histogram)

        @property
        def values_hash(self):
            return _histogram_hash(self.value_histogram)

    def __init__(self, header):
        self.header_ = header
        self.ctable_ = {}
        for col in header:
            self.ctable_[col] = []
        self.numcols_ = len(header)

    def add_row(self, row):
        if len(row) != self.numcols_:
            raise ValueError('number of columns in the given row does not match the number of columns in this table')
        for col in range(self.numcols_):
            self.ctable_[self.header_[col]].append(row[col])

    def get_header(self):
        return self.header_

    def profile_column(self, column):
        prof = self.Profile()
        value_histogram = {}
        pattern_histogram = {}
        for val in self.ctable_[column]:
            val_len = len(val)
            if val_len < prof.minimum_length:
                prof.minimum_length = val_len
                prof.minimum_length_exemplar = val
            if val_len > prof.maximum_length:
                prof.maximum_length = val_len
                prof.maximum_length_exemplar = val
            if val in value_histogram:
                value_histogram[val] += 1
            else:
                value_histogram[val] = 1
            pattern = transforms.Pattern(val)
            if pattern in pattern_histogram:
                pattern_histogram[pattern] = (pattern_histogram[pattern][0] + 1, pattern_histogram[pattern][1])
            else:
                pattern_histogram[pattern] = (1, val)
        prof.value_histogram = value_histogram
        prof.pattern_histogram = pattern_histogram
        return prof


def populate_columnar_table(fileobj, sep='|', header=None):
    if header is None:
        header = fileobj.readline().rstrip().split(sep)
    result = ColumnarTable(header)
    for row in fileobj:
        result.add_row(row.rstrip().split(sep))
    return result


def profile_json(table, limit=1000):
    result = []
    for col in table.get_header():
        profile = table.profile_column(col)

        value_histo = []
        l = 0
        for i in sorted(profile.value_histogram.items(), key=operator.itemgetter(1), reverse=True):
            value_histo.append({
                "value": i[0],
                "count": i[1],
            })
            l += 1
            if l == limit:
                break

        pattern_histo = []
        for i in sorted(profile.pattern_histogram.items(), key=operator.itemgetter(1), reverse=True):
            pattern_histo.append({
                "pattern": i[0],
                "count": i[1][0],
                "exemplar": i[1][1],
            })

        result.append({
            "column": col,
            "column_length": profile.num_values,
            "value_length_min": profile.minimum_length,
            "value_length_min_exemplar": profile.minimum_length_exemplar,
            "value_length_max": profile.maximum_length,
            "value_length_max_exemplar": profile.maximum_length_exemplar,
            "distinct_value_count": profile.num_distinct_values,
            "distinct_pattern_count": profile.num_distinct_patterns,
            "values_hash": profile.values_hash,
            "distinct_values_limit": limit,
            "distinct_values": value_histo,
            "patterns": pattern_histo,
        })
    print(json.dumps(result))


def profile_human_readable(table, limit=100):
    for col in table.get_header():
        profile = table.profile_column(col)
        print('*' * 79)
        try:
            print("column name: {0:s}\nminimum value length: {1:d} [{2:s}]\n" \
                "maximum value length: {3:d} [{4:s}]\n" \
                "count: {5:d}, distinct values: {6:d}, distinct patterns: {7:d}\n" \
                "value hash: {8:s}".format(
                col, profile.minimum_length, profile.minimum_length_exemplar, profile.maximum_length,
                profile.maximum_length_exemplar, profile.num_values, profile.num_distinct_values,
                profile.num_distinct_patterns, profile.values_hash))
        except TypeError:
            print("column name: " + col + "\nEMPTY")
        print('=' * 79)
        l = 0
        p = profile.value_histogram
        for i in sorted(p.items(), key=operator.itemgetter(1), reverse=True):
            sys.stdout.write('\'' + i[0] + '\': ' + str(i[1]) + ', ')
            l += 1
            if l == limit:
                sys.stdout.write('...')
                break
        print()
        print('=' * 79)
        l = 0
        p = profile.pattern_histogram
        for i in sorted(p.items(), key=operator.itemgetter(1), reverse=True):
            sys.stdout.write('\'' + i[0] + '\': ' + str(i[1][0]) + ' [' + i[1][1] + '], ')
            l += 1
            if l == limit:
                sys.stdout.write('...')
                break
        print()


table = None
sep = dt_settings.DEFAULT_DELIMITER
if len(sys.argv) > 1:
    with open(sys.argv[1], 'r') as f:
        table = populate_columnar_table(f, sep)
else:
    table = populate_columnar_table(sys.stdin, sep)

# TODO: Argument parsing to select desired output format
profile_json(table)  # emit profile in JSON
# profile_human_readable(table)  # emit profile in a more "human readable" format
