#!/usr/bin/env python

import ConfigParser
import inspect
import os
import random
import sys
from string import Template

import dt_settings

dtlib_path = os.path.realpath(
    os.path.join(os.path.dirname(inspect.getfile(inspect.currentframe())), dt_settings.DTOOLS_LIB_RELATIVE_PATH))
if dtlib_path not in sys.path:
    sys.path.insert(0, dtlib_path)

from faker import Factory

from dtools_lib import data_generators


def template_variables(template):
    """Extract the variable names from a string.Template.

    Returns a list of all variable names found in the template, in the order
    in which they occur.  If an invalid escape sequence occurs, the same
    error will be raised as if an attempt was made to expand the template.
    """
    result = []
    for match in template.pattern.finditer(template.template):
        if match.group('invalid') is not None:
            # Raises ValueError
            template._invalid(match)
        if match.group('escaped') is not None:
            continue
        # The "or None" should be moot.  It is there to ensure equivalent
        # treatment for an empty 'named' and an empty 'braced'.
        result.append(match.group('named') or match.group('braced') or None)
    return result


def populate_template(s, d):
    # The unfortunate thing here is that template substitutions hit all items in the dictionary even when the
    # template doesn't need it.  To fix this we need to process the template string for the possible keys and
    # only send in a dict with those keys.
    t = Template(s)
    return t.safe_substitute(dict((k, d[k]) for k in template_variables(t) if k in d))


config = ConfigParser.ConfigParser()
config.read(sys.argv[1])

num_records = 100
try:
    num_records = int(sys.argv[2])
except IndexError:
    if config.has_option('Generator', 'records'):
        num_records = config.getint('Generator', 'records')

record_template = config.get('Record', 'template')
generator = Factory.create(config.get('Generator', 'locale', None))

if config.has_option('Generator', 'seed'):
    # Seed PRNGs
    seed = config.getint('Generator', 'seed')
    random.seed(seed)
    generator.seed(seed)

with open(config.get('Generator', 'postal_codes', 'us_postal_codes.csv')) as f:
    residential_address_provider = data_generators.AddressProvider(generator, f, prefix='residential_')

with open(config.get('Generator', 'airport_codes', 'airport_codes.csv')) as f:
    itinerary_provider = data_generators.ItineraryProvider(generator, f)

with open(config.get('Generator', 'cities', 'cities_of_the_world.csv')) as f:
    city_provider = data_generators.CsvProvider(generator, f, prefix='birth_')

gender_probs = data_generators.GenderProvider.DEFAULT_WEIGHTED_GENDERS
if config.has_option('Generator', 'gender_weight_female'):
    gender_probs[0] = ('F', config.getint('Generator', 'gender_weight_female'))
if config.has_option('Generator', 'gender_weight_male'):
    gender_probs[1] = ('M', config.getint('Generator', 'gender_weight_male'))

gender_provider = data_generators.GenderProvider(gender_probs)
biometric_provider = data_generators.BiometricProvider()
name_provider = data_generators.PersonNameProvider(generator)
person_provider = data_generators.PersonDetailsProvider(generator)
sequence_provider = data_generators.SequenceProvider()

if config.has_option('Record', 'header'):
    print config.get('Record', 'header')

for _ in range(num_records):
    tmpl = record_template
    while True:
        try:
            d = gender_provider.generate()
            tmpl = populate_template(tmpl, d)
            for provider in [biometric_provider, name_provider]:
                tmpl = populate_template(tmpl, provider.generate(gender=d['gender']))
            if '$' not in tmpl:
                break
            for provider in [sequence_provider, residential_address_provider, itinerary_provider]:
                tmpl = populate_template(tmpl, provider.generate())
                if Template.delimiter not in tmpl:
                    break
            if Template.delimiter in tmpl:
                d1 = city_provider.generate()
                tmpl = populate_template(tmpl, d1)
                if Template.delimiter in tmpl:
                    d2 = person_provider.generate()
                    if random.random() > 0.05:
                        d2['citizenship'] = d1['birth_country_code']
                    tmpl = populate_template(tmpl, d2)
            print tmpl
        except UnicodeDecodeError:
            continue
        break
